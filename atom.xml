<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-24T10:00:39.777Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/24/hello-world/"/>
    <id>http://yoursite.com/2019/12/24/hello-world/</id>
    <published>2019-12-24T09:57:58.000Z</published>
    <updated>2019-12-24T10:00:39.777Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅析缓冲区与各IO函数的缓冲机制</title>
    <link href="http://yoursite.com/2019/12/24/blog-test/"/>
    <id>http://yoursite.com/2019/12/24/blog-test/</id>
    <published>2019-12-24T09:42:00.000Z</published>
    <updated>2019-12-28T13:24:57.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1：用户空间和内核空间"><a href="#1：用户空间和内核空间" class="headerlink" title="1：用户空间和内核空间"></a>1：用户空间和内核空间</h3><pre><code>当一个进程被执行时，对于32为操作系统而言，它的寻址空间(虚拟地址空间)为4G，其中低位的3G由进程使用，称为用户空间，而高位的1G由内核使用，称为内核空间。每个进程都有自己的用户空间，但内核空间是被各进程共享的。</code></pre><h3 id="2：用户态和内核态"><a href="#2：用户态和内核态" class="headerlink" title="2：用户态和内核态"></a>2：用户态和内核态</h3><pre><code>    CPU的某些指令如果使用不恰当，可能会造成数据损坏、系统崩溃等严重后果，为了保护内核的安全性和稳定性，系统将CPU指令划分了特权等级，如Linux系统使用两个级别的指令：Ring3和Ring0。当程序运行在Ring3时被称为运行在用户态，而Ring0时被称为运行在内核态。系统资源的管理是在内核态下完成的，如进程管理、输入输出IO、内存申请和释放、网络通信等。进程进入内核态的操作被称为系统调用。</code></pre><h3 id="3：C标准库IO缓冲区"><a href="#3：C标准库IO缓冲区" class="headerlink" title="3：C标准库IO缓冲区"></a>3：C标准库IO缓冲区</h3><pre><code>    UNIX下一切皆文件(Everything is a file),键盘、显示器、串口、磁盘等设备在/dev 目录下都有一个特殊的设备文件与之对应。内核为用户预留和write和read函数接口来对文件进行读写，但每次IO操作就进行一次系统调用的效率并不高。因此，C标准库为每个打开的文件都分配一个IO缓冲区，这个缓冲区可以通过文件的FILE* 结构体指针找到，一般为1k字节。文件读写时直接对缓冲区操作而不需要在内核态和用户态之间频繁切换，进而加速了读写操作。以fgetc/fputc为例：当用户程序第一次调用fgetc读一个字节时,fgetc函数可能通过系统调用进入内核读取1k字节到IO缓冲区中,再返回缓冲区中的第一个字节给用户,并把读写位置指向缓冲区中的第二个字符,以后用户再调用fgetc就优先从缓冲区中读取,直到必须再次读写文件时才通过系统调用进入内核。另一方面,用户程序调用fputc时，通常只是写到IO缓冲区中,直到IO缓冲区写满了再通过系统调用把缓冲区中的数据传给内核,内核最终把数据写入磁盘或设备。如果用户程序希望把IO缓冲区中的数据立刻传给内核,可以使用库函数fflush(FILE*)。同样，fclose函数在关闭文件之前也会调用fflush函数。</code></pre><h3 id="4：C标准IO函数缓冲机制"><a href="#4：C标准IO函数缓冲机制" class="headerlink" title="4：C标准IO函数缓冲机制"></a>4：C标准IO函数缓冲机制</h3><pre><code>C标准库定义了多个IO函数，但它们的缓冲机制并不相同。可以分为三类：全缓冲，行缓冲和无缓冲。    全缓冲：缓冲区写满之后才进行系统调用把缓冲区的内容写入内核，如：fputc和        fread。行缓冲：遇到&apos;\n&apos;或缓冲区写满就进行系统调用把缓冲区的内容写入内核。如fputs、        puts(最后会自动添加一个&apos;\n&apos;)、printf和fprintf。无缓冲：直接把内容写入内核而不进行缓冲。除了写满和&apos;\n&apos;之外，行缓冲函数还有两种情况会进行fflush操作。    1：用户程序调用库函数从无缓冲的文件中读取    2：从行缓冲文件中读取,并且这次读操作会引发系统调用从内核读取数据。</code></pre><h6 id="为了验证以上两种特殊情况，我写了代码进行测试："><a href="#为了验证以上两种特殊情况，我写了代码进行测试：" class="headerlink" title="为了验证以上两种特殊情况，我写了代码进行测试："></a>为了验证以上两种特殊情况，我写了代码进行测试：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">//此处测试第二种情况</span><br><span class="line">int main(int argc,char** argv)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"print string"</span>);    //命令行参数只有一个的话不会显示<span class="string">"print string"</span></span><br><span class="line">char buf[128] = &#123;0&#125;;</span><br><span class="line"><span class="keyword">if</span> (argc == 2)</span><br><span class="line">fgets(buf,128,stdin);  //stdin是行缓冲文件，此时会显示<span class="string">"print string"</span></span><br><span class="line"><span class="keyword">while</span>(1);</span><br><span class="line"><span class="built_in">return</span> 0;  //程序返回会关闭所有文件，自动调用fflush</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5：内核缓冲区"><a href="#5：内核缓冲区" class="headerlink" title="5：内核缓冲区"></a>5：内核缓冲区</h3><pre><code>内核中同样有一片缓冲区用来存储与用户区交互的数据。当进程对文件进行read操作时，并不直接读取磁盘，而是先读取内核缓冲区，如果缓冲区中没有数据，则内核会把对数据块的请求加入队列，同时把进程挂起，直到数据被读取到缓冲区中后才通知进程。当进程对文件进行write操作时，也会先把数据写入内核缓冲区，而os可能会等到内核缓冲区的数据积累到一定量后，再一次写入文件。换言之write并不一定会导致内核的write动作，这也就是为什么断电有时会导致数据的丢失。简而言之，read是把数据从内核缓冲区读取到进程缓冲区，而write则是把数据从进程缓冲区写入到内核缓冲区。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1：用户空间和内核空间&quot;&gt;&lt;a href=&quot;#1：用户空间和内核空间&quot; class=&quot;headerlink&quot; title=&quot;1：用户空间和内核空间&quot;&gt;&lt;/a&gt;1：用户空间和内核空间&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;当一个进程被执行时，对于32为操作系统而言，它的寻址
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
</feed>
